/***********************************************************************/
/*                                                                     */
/*  FILE        :TankController.cpp                                    */
/*  DATE        :Mon, Sep 05, 2011                                     */
/*  DESCRIPTION :Main Program                                          */
/*  CPU TYPE    :H8/3694F                                              */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.16).    */
/*                                                                     */
/***********************************************************************/

#include "suicide.hpp"
#include "serial_communication.hpp"
#include "command_manager.hpp"
#include "commands.hpp"
#include "display.hpp"
#include "eeprom.hpp"
#include "rtc.hpp"
#include "thermometer.hpp"
#include "watch_dog.hpp"
#include "heater.hpp"
#include "cooler.hpp"
#include "light.hpp"
#include "tank_status.hpp"
#include "wait.hpp"
#include "alert.hpp"
#include <string>

using namespace util;
using namespace tank_controller;
using namespace tank_controller::commands;

void main(void);
#ifdef __cplusplus
extern "C" {
void abort(void);
}
#endif

const unsigned int setting_address = 0x00;

void measure(tank_status& status, const rtc& clock, const thermometer& thermo)
{
    status.current_time = clock.get();
	status.current_temperature = thermo.measure();
}

void main(void)
{   
    serial_communication& s = serial_communication::get_instance();
    s.write_line("---------------------------");
    s.write_line("      tank controller");
    s.write_line("---------------------------");
    s.write_line("initializing devices...");
    
	//SSR
	heater h;
	cooler c;
	light l;
	
    //ウォッチドッグ
    watch_dog dog;
    s.write_line("watchdog ok");
	
    //温度計
	thermometer thermo;
    s.write_line("thermometer ok");
    
    //EEPROMとRTC
    i2c& i = i2c::get_instance();
    eeprom rom(i);
    s.write_line("eeprom ok");
    rtc clock(i);
    s.write_line("rtc ok");
    
    //LCD
    //display d;
    //d.write_line(0, string("Hello!"));
    s.write_line("lcd ok");
    
    //水槽の状態
    s.write_line("initializing status...");
    bool e = dog.is_error_occured_in_previous_execution();
    if(e)
    {
        s.write_line("error occured in previous execution!");
        alert();
    }
    tank_status status(e);
    status.setting_temperature = rom.load<temperature>(setting_address);
    measure(status, clock, thermo);
    
    //コマンド管理
    command_manager cm;
    
    get_command gc(status);
    set_command sc(status, clock);
    save_command sac(status, rom, setting_address);
    help_command hc;
    //test_command tc;
    default_command dc;
    
    s.register_receiver(cm);
    cm.register_command(gc);
    cm.register_command(sc);
    cm.register_command(sac);
    cm.register_command(hc);
    //cm.register_command(tc);
    cm.register_command(dc); 
    
    //初期化完了
    s.write_line("initialize complete");
    s.write_line("---------------------------");
    cm.show_command_request_character(s);
    
    dog.run();
    while(true)
    {
        //状態の更新
		measure(status, clock, thermo);
		
		//SSRの切り替え
		status.update_switches();
		status.is_heater_on() ? h.on() : h.off();
		status.is_cooler_on() ? c.on() : c.off();
		status.is_light_on() ? l.on() : l.off();
		
        //コマンドの実行
        cm.execute(s);
        
		dog.watch();
    }
    
    serial_communication::delete_instance();
    i2c::delete_instance();
}

#ifdef __cplusplus
void abort(void)
{
    suicide();
}
#endif
